{"version":3,"sources":["Cell.js","Board.js","Rules.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","concat","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","coords","_this$props","ncols","nrows","_coords$split$map","split","map","Number","_coords$split$map2","slicedToArray","y","x","flipCell","every","row","cell","setState","push","Math","random","chanceLightStartOn","console","error","_this2","tableBoard","_loop","coord","src_Cell_0","key","flipCellsAround","toggleRules","React","defaultProps","Rules","show","App","showRules","value","src_Board_0","src_Rules_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f9dff05.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Cell.css\";\r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(evt) {\r\n    this.props.flipCellsAroundMe();\r\n  }\r\n\r\n  render() {\r\n    let classes = `Cell ${this.props.isLit ? \"Lit\" : \"\"}`;\r\n    return <td className={classes} onClick={this.handleClick} />;\r\n  }\r\n}\r\n\r\nexport default Cell;\r\n","import React from \"react\";\r\nimport Cell from \"./Cell\";\r\n\r\nimport \"./Board.css\";\r\n\r\nclass Board extends React.Component {\r\n  static defaultProps = {\r\n    nrows: 5,\r\n    ncols: 5,\r\n    chanceLightStartOn: 0.25\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hasWon: false,\r\n      board: this.createBoard()\r\n    };\r\n  }\r\n\r\n  flipCellsAround(coords) {\r\n    let { ncols, nrows } = this.props;\r\n    let board = this.state.board;\r\n    let [y, x] = coords.split(\"-\").map(Number);\r\n\r\n    function flipCell(y, x) {\r\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\r\n        board[y][x] = !board[y][x];\r\n      }\r\n    }\r\n\r\n    flipCell(y, x);\r\n    flipCell(y, x - 1);\r\n    flipCell(y, x + 1);\r\n    flipCell(y - 1, x);\r\n    flipCell(y + 1, x);\r\n\r\n    let hasWon = board.every(row => row.every(cell => !cell));\r\n    this.setState({ board, hasWon });\r\n  }\r\n\r\n  createBoard() {\r\n    let board = [];\r\n\r\n    for (let y = 0; y < this.props.nrows; y++) {\r\n      let row = [];\r\n\r\n      for (let x = 0; x < this.props.ncols; x++) {\r\n        row.push(Math.random() < this.props.chanceLightStartOn);\r\n      }\r\n\r\n      board.push(row);\r\n    }\r\n\r\n    return board;\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.error(\"Board\", this.props);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasWon) {\r\n      return (\r\n        <div className=\"Board-title\">\r\n          <div className=\"flux\">YOU</div>\r\n          <div className=\"neon\">WON!</div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let tableBoard = [];\r\n\r\n    for (let y = 0; y < this.props.nrows; y++) {\r\n      let row = [];\r\n\r\n      for (let x = 0; x < this.props.ncols; x++) {\r\n        let coord = `${y}-${x}`;\r\n\r\n        row.push(\r\n          <Cell\r\n            key={coord}\r\n            isLit={this.state.board[y][x]}\r\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\r\n          />\r\n        );\r\n      }\r\n\r\n      tableBoard.push(<tr key={y}>{row}</tr>);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"Board-title\">\r\n          <div className=\"flux\">Lights</div>\r\n          <div className=\"neon\">Out</div>\r\n        </div>\r\n        <table className=\"Board\">\r\n          <tbody>{tableBoard}</tbody>\r\n        </table>\r\n        <div className=\"action\">\r\n          <button\r\n            className=\"btn\"\r\n            onClick={() =>\r\n              this.setState({\r\n                board: this.createBoard()\r\n              })\r\n            }\r\n          >\r\n            restart\r\n          </button>\r\n          <button\r\n            onClick={() => this.props.toggleRules(true)}\r\n            className=\"btn rules_btn\"\r\n          >\r\n            how to play\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport \"./Rules.css\";\r\n\r\nconst Rules = props => (\r\n  <div className={props.show ? \"Rules\" : \"Rules hidden\"}>\r\n    <h1 className=\"Rules_title\">Game Rules</h1>\r\n    <p className=\"Rules_text\">\r\n      <span>Lights Out </span>\r\n      is a logic/puzzle game, played on a grid of individual lights, witch can\r\n      either be a lit ot unlit.\r\n    </p>\r\n    <p className=\"Rules_text\">\r\n      The puzzle is won when all of the lights are turned off.\r\n    </p>\r\n    <p className=\"Rules_text\">\r\n      You can click on a cell to toggle light - but it also toggles the light\r\n      above it, to the left, to the right and below it.\r\n    </p>\r\n    <p className=\"Rules_text\">\r\n      Cell on an edge or in the corner wont flip as many lights, since they are\r\n      missing some neighbors. Good luck and enjoy the game!\r\n    </p>\r\n    <button onClick={() => props.toggleRules(false)} className=\"btn\">\r\n      close\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Rules;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Board from \"./Board\";\nimport Rules from \"./Rules\";\n\nclass App extends Component {\n  state = {\n    showRules: false\n  };\n\n  toggleRules = value => {\n    this.setState({ showRules: value });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Board\n          ncols={5}\n          nrows={5}\n          chanceLightStartOn={0.25}\n          toggleRules={this.toggleRules}\n        />\n        <Rules toggleRules={this.toggleRules} show={this.state.showRules} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}